<!DOCTYPE html>
<html>
  <head>
    <title>Main</title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
    <link href="https://fonts.googleapis.com/css?family=Lato" rel="stylesheet">
    <link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel='stylesheet' />
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4=" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.1/css/materialize.min.css">
    <script src="/socket.io/socket.io.js"></script>

  <style>
  canvas{
            border: 1px solid black;
            position:fixed;
            top:0;
            left:0;
            bottom:0;
            right:0;
            z-index: -1;
            background: rgb(182, 25, 36);
         }
  </style>
  </head>
  <body>
  <img src="/images/loading.gif" style="height:100%; width:100%; position:fixed; background-color: white" id="loading"  />
    <div id="app"></div>
    <canvas></canvas>
    <script src="/build/bundle.js"></script>
      <!-- Compiled and minified JavaScript -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/0.100.1/js/materialize.min.js"></script>
  
  <script type="text/javascript">
  var socket = io.connect();
  function keyDown(user){
    console.log("user is ",user);
    
      if(document.getElementById('status-text').value == ""){
        socket.emit("blur")
      }else{
        socket.emit('typing', user);
      }
      document.getElementById('status-text').placeholder = "Type to chat...";
    };
  function setPlaceholder(){
    document.getElementById('txt').placeholder = "Type a message...";
  }
  $(function(){
    

    $("#txt").blur(function(){
      socket.emit('blur');
      
    })
    socket.on('typingp', function(data){
      console.log(data);
      if(document.getElementById('status-text').placeholder.indexOf('is typing')<=0){
        document.getElementById('status-text').placeholder = data + " is typing...";
      }
        
      });
      
    
    socket.on('blurp', function(data){
      document.getElementById('status-text').placeholder = "Type to chat...";
    })
    $('#chat').click(function(){
      var a = [document.getElementById('txt').value, document.getElementById('u').value];
      socket.emit('send message', a);
      document.getElementById('txt').value = ""
    })

    socket.on('new message', function(data){
      //document.getElementById('chat').
      $('#messages').append("<div class='btn btn-block'>"+data.msg[1]+" Said : "+data.msg[0]+"</div>")
    })
  });
     function dropDown(){
          $('.dropdown-button').dropdown();
       }

       $(".dropdown-button").dropdown({ hover: false, belowOrigin: true, constrain_width: false, alignment: 'right', inDuration: 300, outDuration: 225, gutter: 0});
        $(window).on('load',function(){
          $('#loading').hide();
        });
        function clickedMe(){
          $('#loading').show();
          $('#loading').css("z-index","100")
        }
        function hideMe(){
          $("#loading").hide();
        }

        let canvas = document.querySelector('canvas');
let context = canvas.getContext('2d');
canvas.height = window.innerHeight;
canvas.width = window.innerWidth;

let canvasProps = {
    height: canvas.clientHeight,
    width: canvas.clientWidth
}
let cursorProps = {
    _xPos : null,
    _yPos : null
}
canvas.addEventListener('mousemove', function(event){
    cursorProps._xPos = event.clientX;
    cursorProps._yPos = event.clientY;
})

let Ball = function(_color, _radius, _x, _y, _speedX, _speedY){
    this.color = _color;
    this.originalRadius = _radius;
    this.radius = _radius;
    this.x = _x;
    this.y = _y;
    this.speedX = _speedX;
    this.speedY = _speedY;

    this.update = function(_speedX, _speedY){
        // if(cursorProps._xPos != null || cursorProps._yPos != null){
        //     if(Math.abs(this.x - cursorProps._xPos) <=30  && Math.abs(this.y - cursorProps._yPos) <= 30){
        //         if(this.radius < 30){
        //             this.radius += 1;
        //         }
        //     }else{
        //         if(this.radius > this.originalRadius){
        //             this.radius = Math.abs(this.radius-1);
        //         }
        //     }
        // }
        if(this.x + this.radius >= canvasProps.width || this.x - this.radius <= 0){
            this.speedX = -this.speedX
        }
        if(this.y + this.radius >= canvasProps.height || this.y - this.radius <= 0){
            this.speedY = -this.speedY;
        }

        this.x = this.x + this.speedX;
        this.y = this.y + this.speedY;
        this.draw();
    }
    
    this.draw = function(){
        context.beginPath();
        context.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        context.fillStyle = this.color;
        context.fill();
    }
}

//Random Color generator for balls;

let _randomColorGenerator = () => {
    // let _redHue = Math.floor(Math.random() * 255);
    // let _blueHue = Math.floor(Math.random() * 255);
    // let _greenHue = Math.floor(Math.random() * 255);
    // if(_redHue < 40 && _blueHue < 40 || _greenHue < 40){
    //     return 'rgba(173,122,0,1)'
    // }
    // let _rgbaColor = 'rgba('+_redHue+','+_greenHue+','+_blueHue+',1)'
    // return _rgbaColor;
    return 'rgba(255,255,255,1)'
}

//Random Radius generator for balls;

let _randomRadiusGenerator = () =>{
    return 2;
}

//Generate random numbers in range

let _randomRangeGenerator = (_max) => {
    return Math.random() * (_max - 65) + 35;
}

// Get random speed for balls 0 = dx, 1 = dy

let _randomSpeedGenerator = (number) => {
    if(number == 0){
        return (Math.random()*4) - 2.0;
    }else if(number == 1){
        return (Math.random()*4) - 2.0;
    }else{
        console.log("Sorry, only values 1 and 0 accepted for x and y speeds");
    }
}

//Random X & Y co-ordinate generator 0 = x, 1 = y
let _randomCordinateGenerator = (number) => {
    if(number == 0){
        return _randomRangeGenerator(canvasProps.width)
    }else if(number == 1){
        return _randomRangeGenerator(canvasProps.height)
    }else{
        console.log("Sorry, only values 1 and 0 accepted for x and y co-ordinate");
    }
}

let BallArray = [];

for(let index = 0; index <125; index++){
    BallArray.push(new Ball(_randomColorGenerator(),
                            _randomRadiusGenerator(),
                            _randomCordinateGenerator(0),
                            _randomCordinateGenerator(1),
                            _randomSpeedGenerator(0),
                            _randomSpeedGenerator(1)
                        ));
}

//Function to draw all lines to connect each and every ball with mouse position

let drawLines = () => {
    for(let _outer = 0; _outer < BallArray.length; _outer++){
        let _curr = BallArray[_outer];
        for(let _inner = 0; _inner < BallArray.length; _inner++){
            let _target = BallArray[_inner];
            if(Math.abs(_curr.x - _target.x) <= 80 && Math.abs(_curr.y - _target.y) <= 80 ){
                context.beginPath();
                context.moveTo(_curr.x, _curr.y);
                context.lineTo(_target.x, _target.y);
                context.strokeStyle='white';
                context.lineWidth=0.3;
                context.stroke();
            }
        }
    }
    if(cursorProps._xPos == null || cursorProps._yPos == null){
        return;
    }
        for(let innerIndex = 0; innerIndex < BallArray.length; innerIndex++){
            if(Math.abs(cursorProps._xPos - BallArray[innerIndex].x) <= 200 && Math.abs(cursorProps._yPos - BallArray[innerIndex].y) <= 200){
                context.beginPath();
                context.moveTo(cursorProps._xPos, cursorProps._yPos);
                context.lineTo(BallArray[innerIndex].x, BallArray[innerIndex].y);
                context.strokeStyle='white';
                context.lineWidth=0.3;
                context.stroke();
            }
        }
}

let animate = () => {
    requestAnimationFrame(animate);
    context.clearRect(0,0, canvas.clientWidth, canvas.clientHeight);

    for(var index = 0; index < BallArray.length; index++){
        BallArray[index].update();
    }
drawLines();

}
animate();
  </script>

  </body>
</html>
